Q encapsulation in OOP
we can group together a related methods and data members into object 

Q what is abstraction in OOP
we can restrict the private members to use outside of the class to reduce impact of change

Q polymorphism in OOP
to redefine the function logic for different class object we can use this with the help of inheritence


Q super() in OOP
it is used to initialize the constructor of parent class

Q clousers in JS
a function along with it's lexical environment

Q Is javascript fully based on OOP?

Q what is observable in JavaScript?

Q Differnce between promises and observable?
Ans : the main difference is observable returns multiple values on resolve/observe.next()
also observable behaves like an array we can filter something before subscribing the result from resolved obeserver
promises run automatically, promises not waited for someone to subscribe it.
observable will not execute until we subscribe it
but we can unsubscribe the producer/observable but not promises
and we can write unsubscription logic into the observable same as component unmount

Q how v8 engine compiles the javascript code ?

Q what are the cons of using arrow functions in javascript?


Q what are the features of eventloop in javascript

Q set and map functions in javascript

Q regular expression in javascript?

Q promises.all in javascript?

Q is primitive data type or array (specifically )is a reference based data type or not?

Q Differnce between deep copy and shallow copy?
ans as we know by default the object is a reference based data type, so it copies the reference
so if want to to copy it's value in some variable then we can use shallow copy and deep copy
shallow copy:  
let newObj=Obj.assign({},oldObj) // it copies values but only first level child

deep copy:
in order to get rid of this situation of shallow copying that it only copies values of first level not nested 
then we can use deep copy by using JSON.stringify and JSON.parse at the same time
but we will ignore methods in object then we can use lodash library to get rid of this situation
_.clonedeep(oldObject)

Q call() bind() and apply() in javascript
ANS call() bind() and apply are used to borrow function and we can call these by providing this scope the functinality of these methods are same 
the only difference is the usecase
call():
we can call call() method with numbers of arguents along with this
apply():
we can call apply() method with numbers of arguents in a form of an array along with this
bind():
it works same as call() method but the only difference is it returns the copy of the function and we need to invoke it afterwards

Q what is debouncing and throtling in javascript

Q what is JIT compilation (just in time) in javascript

Q Explain the event loop and how it works in JavaScript?

Q what is the difference between undefined and not defined in javascript

Q what are the disadvantages of using callback instaed of promises in javascript





:::::::::::: output questions :::::::::::

1) 
async function sleep(time){
    return new Promise(resolve => settimeout(()=>resolve(time),time))
}
function a {
    console.log(1);
    await sleep(1000);
    console.log(2)
}
function a {
    console.log(3);
    await sleep(1000);
    console.log(4))
}
a()
b()


:::::::::::: output questions :::::::::::
